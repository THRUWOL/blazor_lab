@page "/chatnew"
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.SignalR.Client
@attribute [StreamRendering]


@rendermode InteractiveServer
@using BlazorUI.Hubs
@using System.Diagnostics
@using BlazorUI.Models
@using BlazorUI.Services
@inject IAuthService _authService;
@inject IChatService _chatService;
<PageTitle>Calculator</PageTitle>

<hr />
<style>
    /* improved for chat text box */
    textarea {
        border: 1px dashed #888;
        border-radius: 5px;
        width: 80%;
        overflow: auto;
        background: #f7f7f7
    }

    /* improved for speech bubbles */
    .received, .sent {
        position: relative;
        font-family: arial;
        font-size: 1.1em;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .received:after, .sent:after {
            content: '';
            border: 20px solid transparent;
            position: absolute;
            margin-top: -30px;
        }

    .sent {
        background: #03a9f4;
        color: #fff;
        margin-left: 10%;
        top: 50%;
        text-align: right;
    }

    .received {
        background: #4CAF50;
        color: #fff;
        margin-left: 10px;
        margin-right: 10%;
    }

    .sent:after {
        border-left-color: #03a9f4;
        border-right: 0;
        right: -20px;
    }

    .received:after {
        border-right-color: #4CAF50;
        border-left: 0;
        left: -20px;
    }

    .avatar-image{
        border-radius: 20px;
    }
    /* div within bubble for name */
    .user {
        font-size: 0.8em;
        font-weight: bold;
        color: #000;
    }

    .btn-default {
        border-radius: 3px;
        background-color: #29cc;
    }

    .msg {
        /*display: inline;*/
    }
</style>
@if (_isInChat)
{
    Debug.WriteLine("chat html");
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>Вы подключились как <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    
                    <div class="user">@item.Username</div>
                    <img class="avatar-image" src="@account.AvatarUrl" width="50px" height="50px"/>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_myMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_myMessage))">Send</button>
    </div>
}
@if (!_isHaveAccount && _needToReg)
{
    Debug.WriteLine("reg html");
    <div>
        <div class="form-group">
            <label for="userName">Имя пользователя:</label>
            <input type="text" class="form-control" id="userName" @bind="_username" />
        </div>
        <div class="form-group">
            <label for="password">Пароль:</label>
            <input type="password" class="form-control" id="password" @bind="_password" />
        </div>
        <div class="form-group">
            <label for="avatarUrl">URL аватарки:</label>
            <input type="text" class="form-control" id="avatarUrl" @bind="_userAvatar" />
        </div>
        <button type="submit" class="btn btn-primary" @onclick="Register">Зарегистрироваться</button>
        <button type="button" class="btn btn-secondary" @onclick="ShowLogin">Уже зарегистрированы?</button>
    </div>
    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else if (_isHaveAccount && _needToReg == false)
{
    Debug.WriteLine("log html");
    <div>
        <div class="form-group">
            <label for="userName">Имя пользователя:</label>
            <input type="text" class="form-control" id="userName" @bind="_username" />
        </div>
        <div class="form-group">
            <label for="password">Пароль:</label>
            <input type="password" class="form-control" id="password" @bind="_password" />
        </div>
        <button type="submit" class="btn btn-primary" @onclick="LogIn">Авторизоваться</button>
        <button type="button" class="btn btn-secondary" @onclick="ShowReg">Нет аккаунта?</button>
    </div>
}

@code {

    #region UserRegistration
    private bool _isHaveAccount = false;
    private bool _isInChat = false;
    private bool _needToReg = true;
    private string _username = "";
    private string _password = "";
    private string _userAvatar = "";
    private AccountModel account;

    public async Task Register()
    {
        if (_username != String.Empty && _password != string.Empty)
        {
            account = await _authService.RegisterAsync(_username, _password, _userAvatar);
            if (account is not null)
            {
                Debug.WriteLine("Аккич есть тут");
                _isInChat = true;
                _needToReg = false;
                Chatting();
            }
            else
            {
                _isInChat = false;
            }
        }
    }

    public void ShowLogin()
    {
        _isHaveAccount = true;
        _isInChat = false;
    }

    public void ShowReg()
    {
        _isHaveAccount = false;
        _isInChat = false;
    }
    public async Task LogIn()
    {
        if (_username != string.Empty && _password != string.Empty)
        {
            account = await _authService.LoginAsync(_username, _password);
            Debug.WriteLine("Аккич есть тут 2");
            _isInChat = true;
            Chatting();
        }
    }

    #endregion

    private bool _isLoggedIn = false;

    private string _message = "";

    private string _myMessage = "";

    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task Chatting()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Введите свое имя";
            return;
        }
        try
        {
            _isInChat = true;
            await Task.Delay(1);
            _messages.Clear();
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
                .Build();


            _hubConnection.On<string, string>("ReceiveMessage", BroadcastMessage);

            await _hubConnection.StartAsync();
            await SendAsync($"[N] Поприветствуем нового участника чата - {_username}");
        }
        catch (Exception ex)
        {
            _isInChat = false;
            _message = $"Ошибка подключения к чату {ex.Message}";
            Debug.WriteLine(ex.ToString());
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));
        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_isInChat)
        {
            await SendAsync($"[N] К сожалению, {_username} покинул чат..");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isInChat = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isInChat && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("SendMessage", _username, message);

            _myMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[N]");

        public string CSS => Mine ? "sent" : "received";
    }


}